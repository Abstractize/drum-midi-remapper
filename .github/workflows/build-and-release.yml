name: Build Drum Midi Remapper (Windows/macOS/Linux)

on:
  push:
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]

jobs:
  version:
    name: 🏷️ Generate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Generate semantic version from Git tag
        id: set-version
        run: |
          TAG=$(git describe --tags --abbrev=0)
          VERSION_BASE=${TAG#v}
          COUNT=$(git rev-list --count ${TAG}..HEAD)
          VERSION="$VERSION_BASE.$COUNT"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Using version: $VERSION"

  build-windows:
    name: Build Windows Desktop + CLI
    runs-on: windows-latest
    needs: version
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install MAUI workloads
        run: |
          dotnet workload update
          dotnet workload install maui
          dotnet workload install maui-windows

      - name: Restore dependencies
        run: dotnet restore

      - name: Build Windows MSIX
        run: |
          dotnet publish ./src/GUI/GUI.csproj -f net9.0-windows10.0.19041.0 -c Release `
            -p:Version=${{ needs.version.outputs.version }} `
            -p:WindowsPackageType=MSIX `
            -p:GenerateAppxPackageOnBuild=true

      - name: Build CLI
        run: dotnet publish ./src/CLI/CLI.csproj -c Release -r win-x64 --self-contained true -p:Version=${{ needs.version.outputs.version }} -o ./cli-publish

      - name: Package Windows MSIX
        shell: pwsh
        run: |
          $msix = Get-ChildItem -Path ./src/GUI/bin/Release/** -Recurse -Include "*.msix" | Select-Object -First 1
          Compress-Archive -Path $msix.FullName -DestinationPath DrumMidiRemapper-Windows-${{ needs.version.outputs.version }}.zip

      - uses: actions/upload-artifact@v4
        with:
          name: DrumMidiRemapper-Windows-${{ needs.version.outputs.version }}
          path: |
            DrumMidiRemapper-Windows-${{ needs.version.outputs.version }}.zip
            ./cli-publish/**

  build-macos:
    name: Build macOS Desktop + CLI
    runs-on: macos-latest
    needs: version
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Update XCode
        run: sudo softwareupdate --install "Xcode-16.4"

      - name: Install MAUI workloads
        run: |
          dotnet workload update
          dotnet workload install maui
          dotnet workload install maui-maccatalyst

      - name: Restore dependencies
        run: dotnet workload restore

      - name: Build MacCatalyst App
        run: dotnet publish ./src/GUI/GUI.csproj -f net9.0-maccatalyst -c Release -p:Version=${{ needs.version.outputs.version }}

      - name: Create DMG Installer
        run: |
          brew install create-dmg
          APP_PATH=$(find ./src/GUI/bin/Release/net9.0-maccatalyst/maccatalyst/ -name "*.app" | head -n 1)
          create-dmg \
            --volname "Drum Midi Remapper" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon-size 100 \
            --icon "$APP_PATH" 175 190 \
            --app-drop-link 425 190 \
            "DrumMidiRemapper-${{ needs.version.outputs.version }}.dmg" "$APP_PATH"

      - name: Build CLI
        run: dotnet publish ./src/CLI/CLI.csproj -c Release -r osx-x64 --self-contained true -p:Version=${{ needs.version.outputs.version }} -o ./cli-publish

      - uses: actions/upload-artifact@v4
        with:
          name: DrumMidiRemapper-macOS-${{ needs.version.outputs.version }}
          path: |
            DrumMidiRemapper-${{ needs.version.outputs.version }}.dmg
            ./cli-publish/**

  # build-linux:
  #   name: Build Linux CLI only
  #   runs-on: ubuntu-latest
  #   needs: version
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: 9.0.x

  #     - name: Restore dependencies
  #       run: dotnet restore ./src/CLI/CLI.csproj

  #     - name: Build CLI Linux
  #       run: dotnet publish ./src/CLI/CLI.csproj -c Release --framework net9.0 --self-contained true -p:Version=${{ needs.version.outputs.version }} -o ./cli-publish --no-restore

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: DrumMidiRemapper-LinuxCLI-${{ needs.version.outputs.version }}
  #         path: ./cli-publish/**